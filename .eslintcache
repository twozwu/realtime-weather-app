[{"C:\\Users\\twoz-PC\\Documents\\learn-react\\realtime-weather-app\\src\\index.js":"1","C:\\Users\\twoz-PC\\Documents\\learn-react\\realtime-weather-app\\src\\reportWebVitals.js":"2","C:\\Users\\twoz-PC\\Documents\\learn-react\\realtime-weather-app\\src\\App.js":"3","C:\\Users\\twoz-PC\\Documents\\learn-react\\realtime-weather-app\\src\\components\\WeatherIcon.js":"4","C:\\Users\\twoz-PC\\Documents\\learn-react\\realtime-weather-app\\src\\utils\\helpers.js":"5","C:\\Users\\twoz-PC\\Documents\\learn-react\\realtime-weather-app\\src\\views\\WeatherCard.js":"6","C:\\Users\\twoz-PC\\Documents\\learn-react\\realtime-weather-app\\src\\hooks\\useWeatherAPI.js":"7","C:\\Users\\twoz-PC\\Documents\\learn-react\\realtime-weather-app\\src\\views\\WeatherSetting.js":"8"},{"size":524,"mtime":1610380856854,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"10"},{"size":3590,"mtime":1610936411684,"results":"12","hashOfConfig":"10"},{"size":3392,"mtime":1610818827720,"results":"13","hashOfConfig":"10"},{"size":4050,"mtime":1610867469300,"results":"14","hashOfConfig":"10"},{"size":4029,"mtime":1610940549212,"results":"15","hashOfConfig":"10"},{"size":4078,"mtime":1610864508318,"results":"16","hashOfConfig":"10"},{"size":3320,"mtime":1610934637740,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"12fm1ic",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"C:\\Users\\twoz-PC\\Documents\\learn-react\\realtime-weather-app\\src\\index.js",[],["40","41"],"C:\\Users\\twoz-PC\\Documents\\learn-react\\realtime-weather-app\\src\\reportWebVitals.js",[],"C:\\Users\\twoz-PC\\Documents\\learn-react\\realtime-weather-app\\src\\App.js",["42","43","44","45"],"//import './App.css';\nimport React, { useState, useEffect, useCallback, useMemo } from \"react\";\n//import { ThemeProvider } from \"emotion-theming\";\nimport { useTheme, ThemeProvider, withTheme } from \"@emotion/react\";\nimport { getMoment, findLocation } from \"./utils/helpers\";\nimport WeatherCard from \"./views/WeatherCard\";\nimport styled from \"@emotion/styled\";\nimport useWeatherAPI from \"./hooks/useWeatherAPI\";\nimport WeatherSetting from \"./views/WeatherSetting\";\n\nconst theme = {\n  light: {\n    backgroundColor: \"#ededed\",\n    foregroundColor: \"#f9f9f9\",\n    boxShadow: \"0 1px 3px 0 #999999\",\n    titleColor: \"#212121\",\n    temperatureColor: \"#757575\",\n    textColor: \"#828282\",\n  },\n  dark: {\n    backgroundColor: \"#1F2022\",\n    foregroundColor: \"#121416\",\n    boxShadow:\n      \"0 1px 4px 0 rgba(12, 12, 13, 0.2), 0 0 0 1px rgba(0, 0, 0, 0.15)\",\n    titleColor: \"#f9f9fa\",\n    temperatureColor: \"#dddddd\",\n    textColor: \"#cccccc\",\n  },\n};\n\nconst Container = styled.div`\n  background-color: ${({ theme }) => theme.backgroundColor};\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst AUTHORIZATION_KEY = \"CWB-162A49ED-7604-4411-9750-1DBB6E4CC83F\";\n// const LOCATION_NAME = \"古坑\";\n// const LOCATION_NAME_FORECAST = \"雲林縣\";\n\nfunction App() {\n  const [currentTheme, setCurrentTheme] = useState(\"light\");\n\n  const storageCity = localStorage.getItem(\"cityName\") || \"臺北市\"; //從localStorage取出儲存值\n  const [currentCity, setCurrentCity] = useState(storageCity);\n\n  //這裡可以用useMemo，只要currentCity沒有改變就不需要重新取值\n  const currentLocation = useMemo(() => findLocation(currentCity), [\n    currentCity,\n  ]); //可以找出所有需要的地名，如cityName:臺北市，locationName:臺北\n\n  const { cityName, locationName, sunriseCityName } = currentLocation; //取出currentLocation裡的值\n\n  const [weatherElement, fetchData] = useWeatherAPI({\n    locationName,\n    cityName,\n    authorizationKey: AUTHORIZATION_KEY,\n  });\n\n  //判斷目前是哪個頁面，預設是WeatherCard\n  const [currentPage, setCurrentPage] = useState(\"WeatherCard\");\n\n  //換頁的函式\n  const handleCurrentPageChange = (currentPage) => {\n    //把setCurrentPage包成一個函式才能放入參數\n    setCurrentPage(currentPage);\n  };\n\n  //要切換城市的函式\n  const handleCurrentCityChange = (currentCity) => {\n    setCurrentCity(currentCity);\n  };\n\n  //這裡用useMemo讓日夜沒有改變時，不用再去龐大資料裡找值\n  //TODO：\n  const moment = useMemo(() => getMoment(sunriseCityName), [sunriseCityName]);\n\n  useEffect(() => {\n    setCurrentTheme(moment === \"day\" ? \"light\" : \"dark\");\n  }, [moment]);\n\n  //用解構賦值方法把變數名稱從currentWeather取出來，就可以直接取用\n  const { isLoading, weatherCode } = weatherElement;\n\n  return (\n    <ThemeProvider theme={theme[currentTheme]}>\n      <Container>\n        {console.log(\"render, isLoading:\", isLoading)}\n        {currentPage === \"WeatherCard\" && (\n          <WeatherCard\n            weatherElement={weatherElement}\n            moment={moment}\n            fetchData={fetchData}\n            handleCurrentPageChange={handleCurrentPageChange}\n            cityName={cityName}\n          />\n        )}\n\n        {currentPage === \"WeatherSetting\" && (\n          <WeatherSetting\n            handleCurrentPageChange={handleCurrentPageChange}\n            cityName={cityName}\n            handleCurrentCityChange={handleCurrentCityChange}\n          />\n        )}\n      </Container>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","C:\\Users\\twoz-PC\\Documents\\learn-react\\realtime-weather-app\\src\\components\\WeatherIcon.js",["46"],"// @此為把weatherIcon拆為一個元件\r\n\r\nimport React, { useMemo } from \"react\";\r\nimport styled from \"@emotion/styled\";\r\nimport { ReactComponent as DayCloudyIcon } from \"./../images/day-cloudy.svg\";\r\nimport { ReactComponent as DayClear } from \"./../images/day-clear.svg\";\r\nimport { ReactComponent as DayCloudy } from \"./../images/day-cloudy.svg\";\r\nimport { ReactComponent as DayCloudyFog } from \"./../images/day-cloudy-fog.svg\";\r\nimport { ReactComponent as DayFog } from \"./../images/day-fog.svg\";\r\nimport { ReactComponent as DayPartiallyClearWithRain } from \"./../images/day-partially-clear-with-rain.svg\";\r\nimport { ReactComponent as DaySnowing } from \"./../images/day-snowing.svg\";\r\nimport { ReactComponent as DayThunderstorm } from \"./../images/day-thunderstorm.svg\";\r\nimport { ReactComponent as NightClear } from \"./../images/night-clear.svg\";\r\nimport { ReactComponent as NightCloudy } from \"./../images/night-cloudy.svg\";\r\nimport { ReactComponent as NightCloudyFog } from \"./../images/night-cloudy-fog.svg\";\r\nimport { ReactComponent as NightFog } from \"./../images/night-fog.svg\";\r\nimport { ReactComponent as NightPartiallyClearWithRain } from \"./../images/night-partially-clear-with-rain.svg\";\r\nimport { ReactComponent as NightSnowing } from \"./../images/night-snowing.svg\";\r\nimport { ReactComponent as NightThunderstorm } from \"./../images/night-thunderstorm.svg\";\r\n\r\n//把資料的代碼對應到天氣狀態\r\nconst weatherTypes = {\r\n  isThunderstorm: [15, 16, 17, 18, 21, 22, 33, 34, 35, 36, 41],\r\n  isClear: [1],\r\n  isCloudyFog: [25, 26, 27, 28],\r\n  isCloudy: [2, 3, 4, 5, 6, 7],\r\n  isFog: [24],\r\n  isPartiallyClearWithRain: [\r\n    8,\r\n    9,\r\n    10,\r\n    11,\r\n    12,\r\n    13,\r\n    14,\r\n    19,\r\n    20,\r\n    29,\r\n    30,\r\n    31,\r\n    32,\r\n    38,\r\n    39,\r\n  ],\r\n  isSnowing: [23, 37, 42],\r\n};\r\n\r\n//把天氣狀態又分類為白天和晚上\r\nconst weatherIcons = {\r\n  day: {\r\n    isThunderstorm: <DayThunderstorm />,\r\n    isClear: <DayClear />,\r\n    isCloudyFog: <DayCloudyFog />,\r\n    isCloudy: <DayCloudy />,\r\n    isFog: <DayFog />,\r\n    isPartiallyClearWithRain: <DayPartiallyClearWithRain />,\r\n    isSnowing: <DaySnowing />,\r\n  },\r\n  night: {\r\n    isThunderstorm: <NightThunderstorm />,\r\n    isClear: <NightClear />,\r\n    isCloudyFog: <NightCloudyFog />,\r\n    isCloudy: <NightCloudy />,\r\n    isFog: <NightFog />,\r\n    isPartiallyClearWithRain: <NightPartiallyClearWithRain />,\r\n    isSnowing: <NightSnowing />,\r\n  },\r\n};\r\n\r\nconst weatherCode2Type = (weatherCode) => {\r\n  const [weatherType] =\r\n    //用Object.entries把資料轉換成陣列組再到裡面尋找資料.find，\r\n    Object.entries(weatherTypes).find(\r\n      ([weatherType, weatherCodes]) =>\r\n        weatherCodes.includes(Number(weatherCode)) //把代碼丟進去weatherCodes裡面尋找，把找到後相對應的type回傳給weatherType\r\n    ) || [];\r\n  return weatherType;\r\n};\r\n\r\nconst IconContainer = styled.div`\r\n  flex-basis: 30%;\r\n  svg {\r\n    max-height: 110px;\r\n  }\r\n`;\r\n\r\nconst WeatherIcon = ({ weatherCode, moment }) => {\r\n  //當weatherCode的值不變的時候，就不重新更新\r\n  const weatherType = useMemo(() => weatherCode2Type(weatherCode), [\r\n    weatherCode,\r\n  ]);\r\n  const weatherIcon = weatherIcons[moment][weatherType];\r\n\r\n  return (\r\n    <IconContainer>\r\n      {weatherIcon}\r\n      {/* <DayCloudyIcon /> */}\r\n    </IconContainer>\r\n  );\r\n};\r\n\r\nexport default WeatherIcon;\r\n",["47","48"],"C:\\Users\\twoz-PC\\Documents\\learn-react\\realtime-weather-app\\src\\utils\\helpers.js",[],"C:\\Users\\twoz-PC\\Documents\\learn-react\\realtime-weather-app\\src\\views\\WeatherCard.js",["49"],"import React from \"react\";\r\nimport dayjs from \"dayjs\"; //P.5-16\r\nimport styled from \"@emotion/styled\";\r\n//import { ReactComponent as DayCloudy } from \"./../images/day-cloudy.svg\";\r\nimport { ReactComponent as RainIcon } from \"./../images/rain.svg\";\r\nimport { ReactComponent as AirFlowIcon } from \"./../images/airFlow.svg\";\r\nimport { ReactComponent as RefreshIcon } from \"./../images/refresh.svg\";\r\nimport { ReactComponent as LoadingIcon } from \"./../images/loading.svg\";\r\nimport { ReactComponent as CogIcon } from \"./../images/cog.svg\";\r\nimport WeatherIcon from \"./../components/WeatherIcon\";\r\n\r\nconst WeatherCardWrapper = styled.div`\r\n  position: relative;\r\n  min-width: 360px;\r\n  box-shadow: ${({ theme }) => theme.boxShadow};\r\n  background-color: ${({ theme }) => theme.foregroundColor};\r\n  box-sizing: border-box;\r\n  padding: 30px 15px;\r\n`;\r\n\r\nconst Location = styled.div`\r\n  font-size: 28px;\r\n  color: ${({ theme }) => theme.titleColor};\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nconst Description = styled.div`\r\n  font-size: 16px;\r\n  color: ${({ theme }) => theme.textColor};\r\n  margin-bottom: 30px;\r\n`;\r\n\r\nconst CurrentWeather = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 30px;\r\n`;\r\n\r\nconst Temperature = styled.div`\r\n  color: ${({ theme }) => theme.temperatureColor};\r\n  font-size: 96px;\r\n  font-weight: 300;\r\n  display: flex;\r\n`;\r\n\r\nconst Celsius = styled.div`\r\n  font-weight: normal;\r\n  font-size: 42px;\r\n`;\r\n\r\nconst AirFlow = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  font-size: 16x;\r\n  font-weight: 300;\r\n  color: ${({ theme }) => theme.textColor};\r\n  margin-bottom: 20px;\r\n  svg {\r\n    width: 25px;\r\n    height: auto;\r\n    margin-right: 30px;\r\n  }\r\n`;\r\n\r\nconst Rain = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  font-size: 16x;\r\n  font-weight: 300;\r\n  color: ${({ theme }) => theme.textColor};\r\n  svg {\r\n    width: 25px;\r\n    height: auto;\r\n    margin-right: 30px;\r\n  }\r\n`;\r\n\r\nconst Refresh = styled.div`\r\n  position: absolute;\r\n  right: 15px;\r\n  bottom: 15px;\r\n  font-size: 12px;\r\n  display: inline-flex;\r\n  align-items: flex-end;\r\n  color: ${({ theme }) => theme.textColor};\r\n  cursor: pointer;\r\n  @keyframes rotate {\r\n    from {\r\n      transform: rotate(360deg);\r\n    }\r\n    to {\r\n      transform: rotate(0deg);\r\n    }\r\n  }\r\n  svg {\r\n    margin-left: 10px;\r\n    width: 15px;\r\n    height: 15px;\r\n    animation: rotate infinite 1.5s linear;\r\n    animation-duration: ${({ isLoading }) => (isLoading ? \"1.5s\" : \"0s\")};\r\n  }\r\n`;\r\n\r\nconst Cog = styled(CogIcon)`\r\n  position: absolute;\r\n  top: 30px;\r\n  right: 15px;\r\n  width: 15px;\r\n  height: 15px;\r\n  cursor: pointer;\r\n`;\r\n\r\n//使用解構賦值將傳入的props取出\r\nconst WeatherCard = ({\r\n  weatherElement,\r\n  moment,\r\n  fetchData,\r\n  handleCurrentPageChange,\r\n  cityName,\r\n}) => {\r\n  const {\r\n    observationTime,\r\n    locationName,\r\n    description,\r\n    windSpeed,\r\n    temperature,\r\n    rainPossibility,\r\n    isLoading,\r\n    comfortability,\r\n    weatherCode,\r\n  } = weatherElement;\r\n\r\n  return (\r\n    <WeatherCardWrapper>\r\n      <Cog onClick={() => handleCurrentPageChange(\"WeatherSetting\")} />\r\n      <Location>{cityName}</Location>\r\n      <Description>\r\n        {description} {\"   \"} {comfortability}\r\n      </Description>\r\n\r\n      <CurrentWeather>\r\n        <Temperature>\r\n          {Math.round(temperature)} <Celsius>°C</Celsius>\r\n        </Temperature>\r\n        <WeatherIcon weatherCode={weatherCode} moment={moment} />\r\n      </CurrentWeather>\r\n      <AirFlow>\r\n        <AirFlowIcon /> {windSpeed} m/h\r\n      </AirFlow>\r\n      <Rain>\r\n        <RainIcon /> {rainPossibility}%\r\n      </Rain>\r\n      <Refresh onClick={fetchData} isLoading={isLoading}>\r\n        最後觀測時間：\r\n        {new Intl.DateTimeFormat(\"zh-TW\", {\r\n          hour: \"numeric\",\r\n          minute: \"numeric\",\r\n        }).format(dayjs(observationTime))}{\" \"}\r\n        {isLoading ? <LoadingIcon /> : <RefreshIcon />}\r\n      </Refresh>\r\n    </WeatherCardWrapper>\r\n  );\r\n};\r\nexport default WeatherCard;\r\n","C:\\Users\\twoz-PC\\Documents\\learn-react\\realtime-weather-app\\src\\hooks\\useWeatherAPI.js",["50"],"import React, { useState, useEffect, useCallback } from \"react\";\r\n\r\nconst fetchCurrentWeather = ({ authorizationKey, locationName }) => {\r\n  // setWeatherElement((prevState) => ({\r\n  //   ...prevState,\r\n  //   isLoading: true,\r\n  // }));\r\n\r\n  return (\r\n    fetch(\r\n      `https://opendata.cwb.gov.tw/api/v1/rest/datastore/O-A0003-001?Authorization=${authorizationKey}&locationName=${locationName}`\r\n    )\r\n      //回傳.json()格式檔案\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        const locationData = data.records.location[0];\r\n        const weatherElements = locationData.weatherElement.reduce(\r\n          (neededElements, item) => {\r\n            //neededElements初始值為空物件，item為目前值\r\n            if ([\"WDSD\", \"TEMP\"].includes(item.elementName)) {\r\n              neededElements[item.elementName] = item.elementValue;\r\n              //把elementName當key，Value當值，塞到neededElements裡面\r\n            }\r\n            return neededElements;\r\n          },\r\n          {}\r\n        );\r\n        // setWeatherElement((prevState) => ({\r\n        //   ...prevState,\r\n        return {\r\n          observationTime: locationData.time.obsTime,\r\n          locationName: locationData.locationName,\r\n          temperature: weatherElements.TEMP,\r\n          windSpeed: weatherElements.WDSD,\r\n        };\r\n        // }));\r\n      })\r\n  );\r\n};\r\n\r\nconst fetchWeatherForecast = ({ authorizationKey, cityName }) => {\r\n  return fetch(\r\n    `https://opendata.cwb.gov.tw/api/v1/rest/datastore/F-C0032-001?Authorization=${authorizationKey}&locationName=${cityName}`\r\n  )\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      //取出某縣市的預報資料\r\n      const locationData = data.records.location[0];\r\n      //用reduce只保留需要用到的資料(天氣現象、降雨機率、舒適度)\r\n      const weatherElements = locationData.weatherElement.reduce(\r\n        (neededElements, item) => {\r\n          if ([\"Wx\", \"PoP\", \"CI\"].includes(item.elementName)) {\r\n            // 只取time裡的第一筆資料time[0]\r\n            neededElements[item.elementName] = item.time[0].parameter;\r\n          }\r\n          return neededElements;\r\n        },\r\n        {}\r\n      );\r\n      // setWeatherElement((prevState) => ({\r\n      //   //如果沒展開會出錯\r\n      //   ...prevState,\r\n      return {\r\n        description: weatherElements.Wx.parameterName,\r\n        weatherCode: weatherElements.Wx.parameterValue,\r\n        rainPossibility: weatherElements.PoP.parameterName,\r\n        comfortability: weatherElements.CI.parameterName,\r\n        isLoading: false,\r\n        // }));\r\n      };\r\n    });\r\n};\r\n\r\nconst useWeatherAPI = ({ locationName, cityName, authorizationKey }) => {\r\n  const [weatherElement, setWeatherElement] = useState({\r\n    observationTime: new Date(),\r\n    locationName: \"\",\r\n    description: \"\",\r\n    windSpeed: 0,\r\n    temperature: 0,\r\n    rainPossibility: 0,\r\n    comfortability: \"\",\r\n    isLoading: true,\r\n  });\r\n\r\n  const fetchData = useCallback(async () => {\r\n    setWeatherElement((prevState) => ({\r\n      ...prevState,\r\n      isLoading: true,\r\n    }));\r\n    //使用await等待兩份資料回傳，Promise.all不用管先後順序。ps：要使用await就需要接在async裡面\r\n    //回傳的兩隻API為\"fetch()\"\r\n    const [currentWeather, weatherForecast] = await Promise.all([\r\n      fetchCurrentWeather({ authorizationKey, locationName }),\r\n      fetchWeatherForecast({ authorizationKey, cityName }),\r\n    ]);\r\n    // console.log(currentWeather);\r\n\r\n    setWeatherElement((prevState) => ({\r\n      ...prevState,\r\n      ...currentWeather,\r\n      ...weatherForecast,\r\n      isLoading: false,\r\n    }));\r\n  }, [authorizationKey, locationName, cityName]);\r\n\r\n  useEffect(() => {\r\n    console.log(\"execute function in useEffect\");\r\n\r\n    fetchData();\r\n    // fetchCurrentWeather();\r\n    // fetchWeatherForecast();\r\n  }, [fetchData]);\r\n\r\n  //此處不是回傳JSX，而是要讓其他元件使用的資料或方法\r\n  return [weatherElement, fetchData];\r\n};\r\n\r\nexport default useWeatherAPI;\r\n","C:\\Users\\twoz-PC\\Documents\\learn-react\\realtime-weather-app\\src\\views\\WeatherSetting.js",[],{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":2,"column":38,"nodeType":"57","messageId":"58","endLine":2,"endColumn":49},{"ruleId":"55","severity":1,"message":"59","line":4,"column":10,"nodeType":"57","messageId":"58","endLine":4,"endColumn":18},{"ruleId":"55","severity":1,"message":"60","line":4,"column":35,"nodeType":"57","messageId":"58","endLine":4,"endColumn":44},{"ruleId":"55","severity":1,"message":"61","line":85,"column":22,"nodeType":"57","messageId":"58","endLine":85,"endColumn":33},{"ruleId":"55","severity":1,"message":"62","line":5,"column":28,"nodeType":"57","messageId":"58","endLine":5,"endColumn":41},{"ruleId":"51","replacedBy":"63"},{"ruleId":"53","replacedBy":"64"},{"ruleId":"55","severity":1,"message":"65","line":124,"column":5,"nodeType":"57","messageId":"58","endLine":124,"endColumn":17},{"ruleId":"55","severity":1,"message":"66","line":1,"column":8,"nodeType":"57","messageId":"58","endLine":1,"endColumn":13},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],"no-unused-vars","'useCallback' is defined but never used.","Identifier","unusedVar","'useTheme' is defined but never used.","'withTheme' is defined but never used.","'weatherCode' is assigned a value but never used.","'DayCloudyIcon' is defined but never used.",["67"],["68"],"'locationName' is assigned a value but never used.","'React' is defined but never used.","no-global-assign","no-unsafe-negation"]